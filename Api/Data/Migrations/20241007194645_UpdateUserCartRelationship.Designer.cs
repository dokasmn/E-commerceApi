// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_commerceApi.Migrations
{
    [DbContext(typeof(EcommerceDb))]
    [Migration("20241007194645_UpdateUserCartRelationship")]
    partial class UpdateUserCartRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ECommerceApi.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CartUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CartId");

                    b.HasIndex("CartUserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceApi.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartItemCartCartId")
                        .HasColumnType("int");

                    b.Property<int>("CartItemProductProductId")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartItemCartCartId");

                    b.HasIndex("CartItemProductProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceApi.Models.Product", b =>
                {
                    b.Property<int?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<bool?>("ProductIsFeatured")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("ProductPrice")
                        .HasColumnType("double");

                    b.Property<string>("ProductThumbnail")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerceApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerceApi.Models.Cart", b =>
                {
                    b.HasOne("ECommerceApi.Models.User", "CartUser")
                        .WithOne("UserCart")
                        .HasForeignKey("ECommerceApi.Models.Cart", "CartUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartUser");
                });

            modelBuilder.Entity("ECommerceApi.Models.CartItem", b =>
                {
                    b.HasOne("ECommerceApi.Models.Cart", "CartItemCart")
                        .WithMany("CartCartItems")
                        .HasForeignKey("CartItemCartCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApi.Models.Product", "CartItemProduct")
                        .WithMany()
                        .HasForeignKey("CartItemProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItemCart");

                    b.Navigation("CartItemProduct");
                });

            modelBuilder.Entity("ECommerceApi.Models.Cart", b =>
                {
                    b.Navigation("CartCartItems");
                });

            modelBuilder.Entity("ECommerceApi.Models.User", b =>
                {
                    b.Navigation("UserCart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
